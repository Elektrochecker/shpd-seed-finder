diff --git a/SPD-classes/src/main/java/com/watabou/utils/DeviceCompat.java b/SPD-classes/src/main/java/com/watabou/utils/DeviceCompat.java
index 5deeeab25..69a889175 100644
--- a/SPD-classes/src/main/java/com/watabou/utils/DeviceCompat.java
+++ b/SPD-classes/src/main/java/com/watabou/utils/DeviceCompat.java
@@ -61,7 +61,7 @@ public class DeviceCompat {
 	}
 	
 	public static boolean isDebug(){
-		return Game.version.contains("INDEV");
+		return true;
 	}
 	
 	public static void log( String tag, String message ){
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SeedFinder.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SeedFinder.java
new file mode 100644
index 000000000..1b2f63997
--- /dev/null
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SeedFinder.java
@@ -0,0 +1,211 @@
+package com.shatteredpixel.shatteredpixeldungeon;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroClass;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Imp;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Wandmaker;
+import com.shatteredpixel.shatteredpixeldungeon.items.Dewdrop;
+import com.shatteredpixel.shatteredpixeldungeon.items.EnergyCrystal;
+import com.shatteredpixel.shatteredpixeldungeon.items.Gold;
+import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
+import com.shatteredpixel.shatteredpixeldungeon.items.Item;
+import com.shatteredpixel.shatteredpixeldungeon.items.Heap.Type;
+import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
+import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact;
+import com.shatteredpixel.shatteredpixeldungeon.items.keys.CrystalKey;
+import com.shatteredpixel.shatteredpixeldungeon.items.keys.GoldenKey;
+import com.shatteredpixel.shatteredpixeldungeon.items.keys.IronKey;
+import com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion;
+import com.shatteredpixel.shatteredpixeldungeon.items.quest.CeremonialCandle;
+import com.shatteredpixel.shatteredpixeldungeon.items.quest.CorpseDust;
+import com.shatteredpixel.shatteredpixeldungeon.items.quest.Embers;
+import com.shatteredpixel.shatteredpixeldungeon.items.quest.Pickaxe;
+import com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring;
+import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll;
+import com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand;
+import com.shatteredpixel.shatteredpixeldungeon.items.wands.WandOfDisintegration;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon;
+import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
+import com.shatteredpixel.shatteredpixeldungeon.utils.DungeonSeed;
+
+public class SeedFinder {
+	List<Class<? extends Item>> blacklist;
+
+	private void addTextItems(String caption, ArrayList<Heap> items, StringBuilder builder) {
+		if (!items.isEmpty()) {
+			builder.append(caption + ":\n");
+
+			for (Heap h : items) {
+				Item i = h.peek();
+
+				if (((i instanceof Armor && ((Armor) i).hasGoodGlyph()) ||
+					 (i instanceof Weapon && ((Weapon) i).hasGoodEnchant()) ||
+					 (i instanceof Ring)) && i.cursed)
+					builder.append("- cursed " + i.toString().toLowerCase());
+
+				else
+					builder.append("- " + i.toString().toLowerCase());
+
+				if (h.type != Type.HEAP)
+					builder.append(" (" + h.toString().toLowerCase() + ")");
+
+				builder.append("\n");
+			}
+
+			builder.append("\n");
+		}
+	}
+
+	private void addTextQuest(String caption, ArrayList<Item> items, StringBuilder builder) {
+		if (!items.isEmpty()) {
+			builder.append(caption + ":\n");
+
+			for (Item i : items) {
+				if (i.cursed)
+					builder.append("- cursed " + i.toString().toLowerCase() + "\n");
+
+				else
+					builder.append("- " + i.toString().toLowerCase() + "\n");
+			}
+
+			builder.append("\n");
+		}
+	}
+
+    public SeedFinder() {
+		int floors = 1;
+
+		for (int i = 0; i < DungeonSeed.TOTAL_SEEDS; i++) {
+			if (testSeed(Integer.toString(i), floors)) {
+				listSeedItems(Integer.toString(i), 4);
+			}
+		}
+	}
+
+	private boolean testSeed(String seed, int floors) {
+		SPDSettings.customSeed(seed);
+		GamesInProgress.selectedClass = HeroClass.WARRIOR;
+		Dungeon.init();
+
+		// TODO: check animated statues and mimic drops
+		for (int i = 0; i < floors; i++) {
+			Level l = Dungeon.newLevel();
+			List<Heap> heaps = l.heaps.valueList();
+
+			for (Heap h : heaps) {
+				Item item = h.peek();
+				item.identify();
+
+				// put your constraints here
+				if (item instanceof WandOfDisintegration && item.level() == 2)
+					return true;
+			}
+
+			Dungeon.depth++;
+		}
+
+		return false;
+	}
+
+	private void listSeedItems(String seed, int floors) {
+		SPDSettings.customSeed(seed);
+		GamesInProgress.selectedClass = HeroClass.WARRIOR;
+		Dungeon.init();
+
+		blacklist = Arrays.asList(Gold.class, Dewdrop.class, IronKey.class, GoldenKey.class, CrystalKey.class, EnergyCrystal.class,
+								  CorpseDust.class, Embers.class, CeremonialCandle.class, Pickaxe.class);
+
+		System.out.printf("Items for seed %s (%d):\n", DungeonSeed.convertToCode(Dungeon.seed), Dungeon.seed);
+
+		for (int i = 0; i < floors; i++) {
+			System.out.println("--- Floor " + Dungeon.depth + " ---\n");
+
+			Level l = Dungeon.newLevel();
+			List<Heap> heaps = l.heaps.valueList();
+			StringBuilder builder = new StringBuilder();
+			ArrayList<Heap> scrolls = new ArrayList<>();
+			ArrayList<Heap> potions = new ArrayList<>();
+			ArrayList<Heap> equipment = new ArrayList<>();
+			ArrayList<Heap> rings = new ArrayList<>();
+			ArrayList<Heap> artifacts = new ArrayList<>();
+			ArrayList<Heap> wands = new ArrayList<>();
+			ArrayList<Heap> others = new ArrayList<>();
+
+			// list quest rewards
+			if (Ghost.Quest.armor != null) {
+				ArrayList<Item> rewards = new ArrayList<>();
+				rewards.add(Ghost.Quest.armor);
+				rewards.add(Ghost.Quest.weapon);
+				Ghost.Quest.complete();
+
+				addTextQuest("Ghost quest rewards", rewards, builder);
+			}
+
+			if (Wandmaker.Quest.wand1 != null) {
+				ArrayList<Item> rewards = new ArrayList<>();
+				rewards.add(Wandmaker.Quest.wand1);
+				rewards.add(Wandmaker.Quest.wand2);
+				Wandmaker.Quest.complete();
+
+				builder.append("Wandmaker quest item: ");
+
+				switch (Wandmaker.Quest.type) {
+					case 1: default:
+						builder.append("corpse dust\n\n");
+						break;
+					case 2:
+						builder.append("fresh embers\n\n");
+						break;
+					case 3:
+						builder.append("rotberry seed\n\n");
+				}
+
+				addTextQuest("Wandmaker quest rewards", rewards, builder);
+			}
+
+			if (Imp.Quest.reward != null) {
+				ArrayList<Item> rewards = new ArrayList<>();
+				rewards.add(Imp.Quest.reward.identify());
+				Imp.Quest.complete();
+
+				addTextQuest("Imp quest reward", rewards, builder);
+			}
+
+			// list items
+			for (Heap h : heaps) {
+				Item item = h.peek();
+				item.identify();
+
+				if (h.type == Heap.Type.FOR_SALE) continue;
+				else if (blacklist.contains(item.getClass())) continue;
+				else if (item instanceof Scroll) scrolls.add(h);
+				else if (item instanceof Potion) potions.add(h);
+				else if (item instanceof MeleeWeapon || item instanceof Armor) equipment.add(h);
+				else if (item instanceof Ring) rings.add(h);
+				else if (item instanceof Artifact) artifacts.add( h);
+				else if (item instanceof Wand) wands.add(h);
+				else others.add(h);
+			}
+
+			// addTextItems("Scrolls", scrolls, builder);
+			// addTextItems("Potions", potions, builder);
+			addTextItems("Equipment", equipment, builder);
+			addTextItems("Rings", rings, builder);
+			addTextItems("Artifacts", artifacts, builder);
+			addTextItems("Wands", wands, builder);
+			// addTextItems("Other", others, builder);
+
+			if (builder.length() > 0)
+				builder.setLength(builder.length()-1);
+
+			System.out.println(builder.toString());
+
+			Dungeon.depth++;
+		}
+    }
+}
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
index 147458ebe..edd64ea38 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
@@ -106,17 +106,8 @@ public class ShatteredPixelDungeon extends Game {
 	@Override
 	public void create() {
 		super.create();
+		finish();
 
-		updateSystemUI();
-		SPDAction.loadBindings();
-		
-		Music.INSTANCE.enable( SPDSettings.music() );
-		Music.INSTANCE.volume( SPDSettings.musicVol()*SPDSettings.musicVol()/100f );
-		Sample.INSTANCE.enable( SPDSettings.soundFx() );
-		Sample.INSTANCE.volume( SPDSettings.SFXVol()*SPDSettings.SFXVol()/100f );
-
-		Sample.INSTANCE.load( Assets.Sounds.all );
-		
 	}
 
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
index 740aa90b0..f3023f6b0 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
@@ -201,7 +201,7 @@ public class Wandmaker extends NPC {
 	
 	public static class Quest {
 
-		private static int type;
+		public static int type;
 		// 1 = corpse dust quest
 		// 2 = elemental embers quest
 		// 3 = rotberry quest
diff --git a/desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java b/desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
index 5985bfab4..3d9200de3 100644
--- a/desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
+++ b/desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
@@ -32,6 +32,7 @@ import com.badlogic.gdx.files.FileHandle;
 import com.badlogic.gdx.utils.GdxNativesLoader;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 import com.shatteredpixel.shatteredpixeldungeon.SPDSettings;
+import com.shatteredpixel.shatteredpixeldungeon.SeedFinder;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.services.news.News;
 import com.shatteredpixel.shatteredpixeldungeon.services.news.NewsImpl;
@@ -184,6 +185,9 @@ public class DesktopLauncher {
 		config.setWindowIcon("icons/icon_16.png", "icons/icon_32.png", "icons/icon_48.png",
 				"icons/icon_64.png", "icons/icon_128.png", "icons/icon_256.png");
 
+		config.setInitialVisible(false);
 		new Lwjgl3Application(new ShatteredPixelDungeon(new DesktopPlatformSupport()), config);
+
+		new SeedFinder();
 	}
 }
