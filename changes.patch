From 80dfb26b83448c6f3e8b8aacea8816c4a94bb8f9 Mon Sep 17 00:00:00 2001
From: Timon Lilje <timon.lilje@gmail.com>
Date: Sun, 16 Jul 2023 15:21:57 +0200
Subject: [PATCH] seedfinder apply

---
 .../java/com/watabou/utils/DeviceCompat.java  |   2 +-
 .../shatteredpixeldungeon/SeedFinder.java     | 441 ++++++++++++++++++
 .../ShatteredPixelDungeon.java                |  11 +-
 .../actors/mobs/ArmoredStatue.java            |   2 +-
 .../actors/mobs/Statue.java                   |   2 +-
 .../actors/mobs/npcs/Wandmaker.java           |   2 +-
 .../shatteredpixeldungeon/items/Heap.java     |  14 +-
 .../messages/Languages.java                   |   4 -
 .../desktop/DesktopLauncher.java              |   4 +
 9 files changed, 463 insertions(+), 19 deletions(-)
 create mode 100644 core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SeedFinder.java

diff --git a/SPD-classes/src/main/java/com/watabou/utils/DeviceCompat.java b/SPD-classes/src/main/java/com/watabou/utils/DeviceCompat.java
index d99597cd8..d86357075 100644
--- a/SPD-classes/src/main/java/com/watabou/utils/DeviceCompat.java
+++ b/SPD-classes/src/main/java/com/watabou/utils/DeviceCompat.java
@@ -60,7 +60,7 @@ public class DeviceCompat {
 	}
 	
 	public static boolean isDebug(){
-		return Game.version.contains("INDEV");
+		return true;
 	}
 	
 	public static void log( String tag, String message ){
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SeedFinder.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SeedFinder.java
new file mode 100644
index 000000000..2e04576ce
--- /dev/null
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SeedFinder.java
@@ -0,0 +1,441 @@
+package com.shatteredpixel.shatteredpixeldungeon;
+
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.PrintWriter;
+import java.io.Writer;
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Scanner;
+
+import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroClass;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.ArmoredStatue;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.CrystalMimic;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.GoldenMimic;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mimic;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Ghost;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Imp;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.npcs.Wandmaker;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Statue;
+import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
+import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.Artifact;
+import com.shatteredpixel.shatteredpixeldungeon.items.Dewdrop;
+import com.shatteredpixel.shatteredpixeldungeon.items.EnergyCrystal;
+import com.shatteredpixel.shatteredpixeldungeon.items.Gold;
+import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
+import com.shatteredpixel.shatteredpixeldungeon.items.Heap.Type;
+import com.shatteredpixel.shatteredpixeldungeon.items.Item;
+import com.shatteredpixel.shatteredpixeldungeon.items.keys.CrystalKey;
+import com.shatteredpixel.shatteredpixeldungeon.items.keys.GoldenKey;
+import com.shatteredpixel.shatteredpixeldungeon.items.keys.IronKey;
+import com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion;
+import com.shatteredpixel.shatteredpixeldungeon.items.quest.CeremonialCandle;
+import com.shatteredpixel.shatteredpixeldungeon.items.quest.CorpseDust;
+import com.shatteredpixel.shatteredpixeldungeon.items.quest.Embers;
+import com.shatteredpixel.shatteredpixeldungeon.items.quest.Pickaxe;
+import com.shatteredpixel.shatteredpixeldungeon.items.rings.Ring;
+import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.Scroll;
+import com.shatteredpixel.shatteredpixeldungeon.items.wands.Wand;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.melee.MeleeWeapon;
+import com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon;
+import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
+import com.shatteredpixel.shatteredpixeldungeon.utils.DungeonSeed;
+import com.watabou.utils.Random;
+
+public class SeedFinder {
+	enum Condition {ANY, ALL};
+
+	public static class Options {
+		public static int floors;
+		public static Condition condition;
+		public static String itemListFile;
+		public static String ouputFile;
+		public static long seed;
+	}
+
+	public class HeapItem {
+		public Item item;
+		public Heap heap;
+
+		public HeapItem(Item item, Heap heap) {
+			this.item = item;
+			this.heap = heap;
+		}
+	}
+
+	List<Class<? extends Item>> blacklist;
+	ArrayList<String> itemList;
+
+	// TODO: make it parse the item list directly from the arguments
+	private void parseArgs(String[] args) {
+		if (args.length == 2) {
+			Options.ouputFile = "stdout";
+			Options.floors = Integer.parseInt(args[0]);
+			Options.seed = DungeonSeed.convertFromText(args[1]);
+
+			return;			
+		}
+
+		Options.floors = Integer.parseInt(args[0]);
+		Options.condition = args[1].equals("any") ? Condition.ANY : Condition.ALL;
+		Options.itemListFile = args[2];
+
+		if (args.length < 4)
+			Options.ouputFile = "out.txt";
+
+		else
+			Options.ouputFile = args[3];
+	}
+
+	private ArrayList<String> getItemList() {
+		ArrayList<String> itemList = new ArrayList<>();
+
+		try {
+			Scanner scanner = new Scanner(new File(Options.itemListFile));
+
+			while (scanner.hasNextLine()) {
+				itemList.add(scanner.nextLine());
+			}
+
+			scanner.close();
+
+		} catch (FileNotFoundException e) {
+			e.printStackTrace();
+		}
+
+		return itemList;
+	}
+
+	private void addTextItems(String caption, ArrayList<HeapItem> items, StringBuilder builder) {
+		if (!items.isEmpty()) {
+			builder.append(caption + ":\n");
+
+			for (HeapItem item : items) {
+				Item i = item.item;
+				Heap h = item.heap;
+
+				if (((i instanceof Armor && ((Armor) i).hasGoodGlyph()) ||
+					(i instanceof Weapon && ((Weapon) i).hasGoodEnchant()) ||
+					(i instanceof Ring) || (i instanceof Wand) ||
+					(i instanceof Artifact)) && i.cursed)
+					
+					builder.append("- cursed " + i.title().toLowerCase());
+
+				else
+					builder.append("- " + i.title().toLowerCase());
+
+				if (h.type != Type.HEAP)
+					builder.append(" (" + h.title().toLowerCase() + ")");
+
+				builder.append("\n");
+			}
+
+			builder.append("\n");
+		}
+	}
+
+	private void addTextQuest(String caption, ArrayList<Item> items, StringBuilder builder) {
+		if (!items.isEmpty()) {
+			builder.append(caption + ":\n");
+
+			for (Item i : items) {
+				if (i.cursed)
+					builder.append("- cursed " + i.title().toLowerCase() + "\n");
+
+				else
+					builder.append("- " + i.title().toLowerCase() + "\n");
+			}
+
+			builder.append("\n");
+		}
+	}
+
+    public SeedFinder(String[] args) {
+		parseArgs(args);
+
+		if (args.length == 2) {
+			logSeedItems(Long.toString(Options.seed), Options.floors);
+
+			return;
+		}
+
+		itemList = getItemList();
+
+		try {
+			Writer outputFile = new FileWriter(Options.ouputFile);
+			outputFile.close();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+
+
+		String seedDigits = Integer.toString(Random.Int(500000));
+		for (int i = Random.Int(9999999); i < DungeonSeed.TOTAL_SEEDS; i++) {
+			if (testSeed(seedDigits + Integer.toString(i), Options.floors)) {
+				System.out.printf("Found valid seed %s (%d)\n", DungeonSeed.convertToCode(Dungeon.seed), Dungeon.seed);
+				logSeedItems(seedDigits + Integer.toString(i), Options.floors);
+			}
+		}
+	}
+
+	private ArrayList<Heap> getMobDrops(Level l) {
+		ArrayList<Heap> heaps = new ArrayList<>();
+
+		for (Mob m : l.mobs) {
+			if (m instanceof Statue) {
+				Heap h = new Heap();
+				h.items = new LinkedList<>();
+				h.items.add(((Statue) m).weapon.identify());
+				h.type = Type.STATUE;
+				heaps.add(h);
+			}
+
+			else if (m instanceof ArmoredStatue) {
+				Heap h = new Heap();
+				h.items = new LinkedList<>();
+				h.items.add(((ArmoredStatue) m).armor.identify());
+				h.items.add(((ArmoredStatue) m).weapon.identify());
+				h.type = Type.STATUE;
+				heaps.add(h);
+			}
+
+			else if (m instanceof Mimic) {
+				Heap h = new Heap();
+				h.items = new LinkedList<>();
+
+				for (Item item : ((Mimic) m).items)
+					h.items.add(item.identify());
+
+				if (m instanceof GoldenMimic) h.type = Type.GOLDEN_MIMIC;
+				else if (m instanceof CrystalMimic) h.type = Type.CRYSTAL_MIMIC;
+				else h.type = Type.MIMIC;
+				heaps.add(h);
+			}
+		}
+
+		return heaps;
+	}
+
+	private boolean testSeed(String seed, int floors) {
+		SPDSettings.customSeed(seed);
+		GamesInProgress.selectedClass = HeroClass.WARRIOR;
+		Dungeon.init();
+
+		boolean[] itemsFound = new boolean[itemList.size()];
+
+		for (int i = 0; i < floors; i++) {
+			Level l = Dungeon.newLevel();
+
+			ArrayList<Heap> heaps = new ArrayList<>(l.heaps.valueList());
+			heaps.addAll(getMobDrops(l));
+
+			for (Heap h : heaps) {
+				for (Item item : h.items) {
+					item.identify();
+
+					for (int j = 0; j < itemList.size(); j++) {
+						if (item.title().toLowerCase().contains(itemList.get(j))) {
+							if (itemsFound[j] == false) {
+								itemsFound[j] = true;
+								break;
+							}
+						}
+					}
+				}
+			}
+
+			Dungeon.depth++;
+		}
+
+		if (Options.condition == Condition.ANY) {
+			for (int i = 0; i < itemList.size(); i++) {
+				if (itemsFound[i] == true)
+					return true;
+			}
+
+			return false;
+		}
+
+		else {
+			for (int i = 0; i < itemList.size(); i++) {
+				if (itemsFound[i] == false)
+					return false;
+			}
+
+			return true;
+		}
+	}
+
+	private void logSeedItems(String seed, int floors) {
+		PrintWriter out = null;
+		OutputStream out_fd = System.out;
+
+		try {
+			if (Options.ouputFile != "stdout")
+				out_fd = new FileOutputStream(Options.ouputFile, true);
+
+			out = new PrintWriter(out_fd);
+		} catch (FileNotFoundException e) { // gotta love Java mandatory exceptions
+			e.printStackTrace();
+		}
+
+		SPDSettings.customSeed(seed);
+		GamesInProgress.selectedClass = HeroClass.WARRIOR;
+		Dungeon.init();
+
+		blacklist = Arrays.asList(Gold.class, Dewdrop.class, IronKey.class, GoldenKey.class, CrystalKey.class, EnergyCrystal.class,
+								  CorpseDust.class, Embers.class, CeremonialCandle.class, Pickaxe.class);
+
+		out.printf("Items for seed %s (%d):\n\n", DungeonSeed.convertToCode(Dungeon.seed), Dungeon.seed);
+
+		for (int i = 0; i < floors; i++) {
+
+			Level l = Dungeon.newLevel();
+			ArrayList<Heap> heaps = new ArrayList<>(l.heaps.valueList());
+			StringBuilder builder = new StringBuilder();
+			ArrayList<HeapItem> scrolls = new ArrayList<>();
+			ArrayList<HeapItem> potions = new ArrayList<>();
+			ArrayList<HeapItem> equipment = new ArrayList<>();
+			ArrayList<HeapItem> rings = new ArrayList<>();
+			ArrayList<HeapItem> artifacts = new ArrayList<>();
+			ArrayList<HeapItem> wands = new ArrayList<>();
+			ArrayList<HeapItem> others = new ArrayList<>();
+
+			out.printf("--- floor %d: ", Dungeon.depth);
+
+			String feeling = l.feeling.toString();
+
+			switch (feeling) {
+				case "NONE":
+					feeling = "no feeling";
+					break;
+				case "CHASM":
+					feeling = "chasms";
+					break;
+				case "WATER":
+					feeling = "water";
+					break;
+				case "GRASS":
+					feeling = "vegetation";
+					break;
+				case "DARK":
+					feeling = "enemies moving in the darkness";
+					break;
+				case "LARGE":
+					feeling = "unusually large";
+					break;
+				case "TRAPS":
+					feeling = "traps";
+					break;
+				case "SECRETS":
+					feeling = "secrets";
+					break;
+			}
+
+			switch (Dungeon.depth) {
+				case 5:
+					feeling = "goo";
+					break;
+				
+				case 10:
+					feeling = "tengu";
+					break;
+				
+				case 15:
+					feeling = "DM-300";
+					break;
+				
+				case 20:
+					feeling = "dwarven king";
+					break;
+				
+				case 25:
+					feeling = "yog dzewa";
+					break;
+			}
+
+			out.printf(feeling + "\n\n");
+
+			// list quest rewards
+			if (Ghost.Quest.armor != null) {
+				ArrayList<Item> rewards = new ArrayList<>();
+				rewards.add(Ghost.Quest.armor.identify());
+				rewards.add(Ghost.Quest.weapon.identify());
+				Ghost.Quest.complete();
+
+				addTextQuest("Ghost quest rewards", rewards, builder);
+			}
+
+			if (Wandmaker.Quest.wand1 != null) {
+				ArrayList<Item> rewards = new ArrayList<>();
+				rewards.add(Wandmaker.Quest.wand1.identify());
+				rewards.add(Wandmaker.Quest.wand2.identify());
+				Wandmaker.Quest.complete();
+
+				builder.append("Wandmaker quest item: ");
+
+				switch (Wandmaker.Quest.type) {
+					case 1: default:
+						builder.append("corpse dust\n\n");
+						break;
+					case 2:
+						builder.append("fresh embers\n\n");
+						break;
+					case 3:
+						builder.append("rotberry seed\n\n");
+				}
+
+				addTextQuest("Wandmaker quest rewards", rewards, builder);
+			}
+
+			if (Imp.Quest.reward != null) {
+				ArrayList<Item> rewards = new ArrayList<>();
+				rewards.add(Imp.Quest.reward.identify());
+				Imp.Quest.complete();
+
+				addTextQuest("Imp quest reward", rewards, builder);
+			}
+
+			heaps.addAll(getMobDrops(l));
+
+			// list items
+			for (Heap h : heaps) {
+				for (Item item : h.items) {
+					item.identify();
+
+					if (h.type == Type.FOR_SALE) continue;
+					else if (blacklist.contains(item.getClass())) continue;
+					else if (item instanceof Scroll) scrolls.add(new HeapItem(item, h));
+					else if (item instanceof Potion) potions.add(new HeapItem(item, h));
+					else if (item instanceof MeleeWeapon || item instanceof Armor) equipment.add(new HeapItem(item, h));
+					else if (item instanceof Ring) rings.add(new HeapItem(item, h));
+					else if (item instanceof Wand) wands.add(new HeapItem(item, h));
+					else if (item instanceof Artifact) {
+						 artifacts.add(new HeapItem(item, h));
+					} else others.add(new HeapItem(item, h));
+				}
+			}
+
+			addTextItems("Scrolls", scrolls, builder);
+			addTextItems("Potions", potions, builder);
+			addTextItems("Equipment", equipment, builder);
+			addTextItems("Rings", rings, builder);
+			addTextItems("Artifacts", artifacts, builder);
+			addTextItems("Wands", wands, builder);
+			addTextItems("Other", others, builder);
+
+			out.print(builder.toString());
+
+			Dungeon.depth++;
+		}
+
+		out.close();
+    }
+}
\ No newline at end of file
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
index 6410e07cf..368294b25 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
@@ -67,17 +67,8 @@ public class ShatteredPixelDungeon extends Game {
 	@Override
 	public void create() {
 		super.create();
+		finish();
 
-		updateSystemUI();
-		SPDAction.loadBindings();
-		
-		Music.INSTANCE.enable( SPDSettings.music() );
-		Music.INSTANCE.volume( SPDSettings.musicVol()*SPDSettings.musicVol()/100f );
-		Sample.INSTANCE.enable( SPDSettings.soundFx() );
-		Sample.INSTANCE.volume( SPDSettings.SFXVol()*SPDSettings.SFXVol()/100f );
-
-		Sample.INSTANCE.load( Assets.Sounds.all );
-		
 	}
 
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/ArmoredStatue.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/ArmoredStatue.java
index 0445e3684..cdbee598d 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/ArmoredStatue.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/ArmoredStatue.java
@@ -41,7 +41,7 @@ public class ArmoredStatue extends Statue {
 		spriteClass = StatueSprite.class;
 	}
 
-	protected Armor armor;
+	public Armor armor;
 
 	public ArmoredStatue(){
 		super();
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
index 5721085ee..7b24a9356 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
@@ -47,7 +47,7 @@ public class Statue extends Mob {
 		properties.add(Property.INORGANIC);
 	}
 	
-	protected Weapon weapon;
+	public Weapon weapon;
 
 	public boolean levelGenStatue = true;
 	
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
index f500bc4d7..d76e4eb88 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
@@ -206,7 +206,7 @@ public class Wandmaker extends NPC {
 	
 	public static class Quest {
 
-		private static int type;
+		public static int type;
 		// 1 = corpse dust quest
 		// 2 = elemental embers quest
 		// 3 = rotberry quest
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
index 274d66d59..daf15be35 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Heap.java
@@ -66,7 +66,11 @@ public class Heap implements Bundlable {
 		CRYSTAL_CHEST,
 		TOMB,
 		SKELETON,
-		REMAINS
+		REMAINS,
+		MIMIC,
+		GOLDEN_MIMIC,
+		CRYSTAL_MIMIC,
+		STATUE
 	}
 	public Type type = Type.HEAP;
 	
@@ -377,6 +381,14 @@ public class Heap implements Bundlable {
 				return Messages.get(this, "skeleton");
 			case REMAINS:
 				return Messages.get(this, "remains");
+			case MIMIC:
+				return "mimic";
+			case GOLDEN_MIMIC:
+				return "golden mimic";
+			case CRYSTAL_MIMIC:
+				return "crystal mimic";
+			case STATUE:
+				return "statue";
 			default:
 				return peek().title();
 		}
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/messages/Languages.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/messages/Languages.java
index 98f7793b6..55be41208 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/messages/Languages.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/messages/Languages.java
@@ -97,10 +97,6 @@ public enum Languages {
 	}
 
 	public static Languages matchCode(String code){
-		for (Languages lang : Languages.values()){
-			if (lang.code().equals(code))
-				return lang;
-		}
 		return ENGLISH;
 	}
 
diff --git a/desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java b/desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
index f448f2557..0733bf5ac 100644
--- a/desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
+++ b/desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
@@ -28,6 +28,7 @@ import com.badlogic.gdx.backends.lwjgl3.Lwjgl3FileHandle;
 import com.badlogic.gdx.backends.lwjgl3.Lwjgl3Preferences;
 import com.badlogic.gdx.utils.SharedLibraryLoader;
 import com.shatteredpixel.shatteredpixeldungeon.SPDSettings;
+import com.shatteredpixel.shatteredpixeldungeon.SeedFinder;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.services.news.News;
 import com.shatteredpixel.shatteredpixeldungeon.services.news.NewsImpl;
@@ -185,6 +186,9 @@ public class DesktopLauncher {
 		config.setWindowIcon("icons/icon_16.png", "icons/icon_32.png", "icons/icon_48.png",
 				"icons/icon_64.png", "icons/icon_128.png", "icons/icon_256.png");
 
+		config.setInitialVisible(false);
 		new Lwjgl3Application(new ShatteredPixelDungeon(new DesktopPlatformSupport()), config);
+
+		new SeedFinder(args);
 	}
 }
-- 
2.41.0.windows.1

